import streamlit as st
import pandas as pd
import pyodbc
import time
import utils.utils as utils
def exit_user():
    if "password_correct" in st.session_state or "username" in st.session_state:
        del st.session_state.password_correct
        del st.session_state.username
        st.switch_page("–ú–æ–Ω–∏—Ç–æ—Ä_–ñ–ö–•.py")

def alltrim(s):
    return s.strip()
def no_auth_menu():
    st.sidebar.page_link("–ú–æ–Ω–∏—Ç–æ—Ä_–ñ–ö–•.py", label="–í—Ö–æ–¥ –≤ –ú–æ–Ω–∏—Ç–æ—Ä –ñ–ö–•")
    st.sidebar.page_link("pages/0_üëà_–í—ã—Ö–æ–¥.py", label="–í—ã—Ö–æ–¥")
def auth_menu():
    if "username" not in st.session_state or "password_correct" not in st.session_state:
        return
    st.sidebar.page_link("pages/1_üîç_–ü–æ–∏—Å–∫_–î–æ–º–∞.py", label="–ü–æ–∏—Å–∫ –¥–æ–º–∞")
    st.sidebar.page_link("pages/2_ü¶≥_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.py", label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",disabled=st.session_state.username != "adm",)
    st.sidebar.page_link("pages/3_üè¢_–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.py", label="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",disabled=st.session_state.username != "adm",)
    with st.sidebar:
        info_success = st.empty()
        info_success.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "+ st.session_state.username +" –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
def init_connection():
    try:
        connection_string = (
            "DRIVER={ODBC Driver 17 for SQL Server};"
            "SERVER=" + st.secrets["server"] + ";"
            "DATABASE=" + st.secrets["database"] + ";"
            "UID=" + st.secrets["username"] + ";"
            "PWD=" + st.secrets["password"]
        )
        conn = pyodbc.connect(connection_string, timeout=5)
        return conn
    except pyodbc.OperationalError as e:
        # Handle the OperationalError exception
        error_message = str(e)
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_message}")
        # You can add additional error handling code here, such as logging or retrying the connection
        return None
#@st.cache_data(ttl=600)

def run_query(query, params=None):
    conn = st.session_state["conn"]
    if conn is None:
        return None  # or raise an exception, or handle the error in some other way
    
    with conn.cursor() as cur:
        if params:
            cur.execute(query, params)
        else:
            cur.execute(query)
        return cur.fetchall()
def auth_check():
    no_auth_menu()
    if "username" not in st.session_state or "password_correct" not in st.session_state:
        st.write( "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")  
        st.switch_page("–ú–æ–Ω–∏—Ç–æ—Ä_–ñ–ö–•.py") 
    else:      
       st.session_state["password_correct"] =  st.session_state["password_correct"]
       st.session_state["username"] =  st.session_state["username"] 
       
    if st.session_state.get("password_correct", False)==False:
        st.write( "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        st.switch_page("–ú–æ–Ω–∏—Ç–æ—Ä_–ñ–ö–•.py")
    else:
        if st.session_state.get("username")==None:
            st.write( "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            st.switch_page("–ú–æ–Ω–∏—Ç–æ—Ä_–ñ–ö–•.py")
        else:   
            #st.write( "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "+st.session_state.get("username") +" –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            auth_menu()  
def get_conn_status():
    if "conn" in st.session_state and st.session_state["conn"] is not None:
        conn = st.session_state["conn"]
        st.session_state["conn"] =conn
        return conn 
    with st.status("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...", state="running", expanded=True) as status:
        st.write("–û–∂–∏–¥–∞–π—Ç–µ...")
        st.session_state["conn"] = utils.init_connection()
        if st.session_state.get("conn") is None:
            del st.session_state["password_correct"]
            status.update(label="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",state="error", expanded=True)
            st.write("–í—ã–ø–æ–ª–Ω–µ–Ω –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ú–æ–Ω–∏—Ç–æ—Ä–∞ –ñ–ö–•.")   
            if st.button("–í–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑"):
                st.switch_page("–ú–æ–Ω–∏—Ç–æ—Ä_–ñ–ö–•.py") 
            st.stop()   
        else:        
            conn = st.session_state["conn"]
            st.session_state["conn"] =conn
            status.update(label="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.",state="complete", expanded=True)   
            st.write("–ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å...")
    #time.sleep (5)       
    status.update(label="–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞",state="complete", expanded=False)
    return conn                